version: '3'

vars:
  BINARY_NAME: koopa
  VERSION:
    sh: git describe --tags --always --dirty 2>/dev/null || echo "v0.1.0-dev"
  BUILD_TIME:
    sh: date -u '+%Y-%m-%d %H:%M:%S'
  GIT_COMMIT:
    sh: git rev-parse HEAD 2>/dev/null || echo "unknown"
  LDFLAGS: >-
    -X 'github.com/koopa0/koopa/cmd.AppVersion={{.VERSION}}'
    -X 'github.com/koopa0/koopa/cmd.BuildTime={{.BUILD_TIME}}'
    -X 'github.com/koopa0/koopa/cmd.GitCommit={{.GIT_COMMIT}}'

tasks:
  default:
    desc: Display available tasks
    cmds:
      - task --list

  build:
    desc: Build the application with version information
    cmds:
      - go build -ldflags="{{.LDFLAGS}}" -o {{.BINARY_NAME}} .
    sources:
      - '**/*.go'
      - go.mod
      - go.sum
    generates:
      - '{{.BINARY_NAME}}'

  build:release:
    desc: Build optimized release binary
    cmds:
      - go build -ldflags="{{.LDFLAGS}} -s -w" -o {{.BINARY_NAME}} .
    sources:
      - '**/*.go'
      - go.mod
      - go.sum
    generates:
      - '{{.BINARY_NAME}}'

  build:all:
    desc: Build for all platforms
    cmds:
      - task: build:linux
      - task: build:darwin
      - task: build:windows

  build:linux:
    desc: Build for Linux (amd64 and arm64)
    cmds:
      - GOOS=linux GOARCH=amd64 go build -ldflags="{{.LDFLAGS}}" -o {{.BINARY_NAME}}-linux-amd64 .
      - GOOS=linux GOARCH=arm64 go build -ldflags="{{.LDFLAGS}}" -o {{.BINARY_NAME}}-linux-arm64 .

  build:darwin:
    desc: Build for macOS (amd64 and arm64)
    cmds:
      - GOOS=darwin GOARCH=amd64 go build -ldflags="{{.LDFLAGS}}" -o {{.BINARY_NAME}}-darwin-amd64 .
      - GOOS=darwin GOARCH=arm64 go build -ldflags="{{.LDFLAGS}}" -o {{.BINARY_NAME}}-darwin-arm64 .

  build:windows:
    desc: Build for Windows
    cmds:
      - GOOS=windows GOARCH=amd64 go build -ldflags="{{.LDFLAGS}}" -o {{.BINARY_NAME}}-windows-amd64.exe .

  test:
    desc: Run tests
    cmds:
      - go test -v -race -coverprofile=coverage.out ./...

  test:coverage:
    desc: Run tests and display coverage
    cmds:
      - task: test
      - go tool cover -html=coverage.out

  lint:
    desc: Run all linters
    cmds:
      - task: lint:vet
      - task: lint:staticcheck
      - task: lint:golangci

  lint:vet:
    desc: Run go vet
    cmds:
      - go vet ./...

  lint:staticcheck:
    desc: Run staticcheck
    cmds:
      - staticcheck ./...

  lint:golangci:
    desc: Run golangci-lint
    cmds:
      - golangci-lint run

  lint:gosec:
    desc: Run gosec security scanner
    cmds:
      - gosec ./...

  fmt:
    desc: Format code
    cmds:
      - go fmt ./...

  tidy:
    desc: Tidy dependencies
    cmds:
      - go mod tidy

  clean:
    desc: Clean build artifacts
    cmds:
      - rm -f {{.BINARY_NAME}}
      - rm -f {{.BINARY_NAME}}-*
      - rm -f coverage.out

  run:
    desc: Build and run the application
    cmds:
      - task: build
      - ./{{.BINARY_NAME}} {{.CLI_ARGS}}

  version:
    desc: Display version information
    cmds:
      - echo "Version: {{.VERSION}}"
      - echo "Build Time: {{.BUILD_TIME}}"
      - echo "Git Commit: {{.GIT_COMMIT}}"

  install:
    desc: Install the binary to $GOPATH/bin
    cmds:
      - go install -ldflags="{{.LDFLAGS}}" .

  dev:
    desc: Run in development mode with live reload (requires air)
    cmds:
      - air

  db:migrate:
    desc: Run database migrations
    cmds:
      - ./{{.BINARY_NAME}} version # Trigger migration

  ci:
    desc: Run CI checks (lint + test)
    cmds:
      - task: lint
      - task: test
