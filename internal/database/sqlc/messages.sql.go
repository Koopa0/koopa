// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: messages.sql

package sqlc

import (
	"context"
	"time"
)

const addMessage = `-- name: AddMessage :one
INSERT INTO messages (session_id, role, content, created_at)
VALUES (?, ?, ?, ?)
RETURNING id, session_id, role, content, created_at
`

type AddMessageParams struct {
	SessionID int64     `json:"session_id"`
	Role      string    `json:"role"`
	Content   string    `json:"content"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) AddMessage(ctx context.Context, arg AddMessageParams) (Message, error) {
	row := q.db.QueryRowContext(ctx, addMessage,
		arg.SessionID,
		arg.Role,
		arg.Content,
		arg.CreatedAt,
	)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.SessionID,
		&i.Role,
		&i.Content,
		&i.CreatedAt,
	)
	return i, err
}

const getAllMessages = `-- name: GetAllMessages :many
SELECT id, session_id, role, content, created_at
FROM messages
WHERE session_id = ?
ORDER BY created_at ASC
`

func (q *Queries) GetAllMessages(ctx context.Context, sessionID int64) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, getAllMessages, sessionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Message{}
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.SessionID,
			&i.Role,
			&i.Content,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMessages = `-- name: GetMessages :many
SELECT id, session_id, role, content, created_at
FROM messages
WHERE session_id = ?
ORDER BY created_at ASC
LIMIT ?
`

type GetMessagesParams struct {
	SessionID int64 `json:"session_id"`
	Limit     int64 `json:"limit"`
}

func (q *Queries) GetMessages(ctx context.Context, arg GetMessagesParams) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, getMessages, arg.SessionID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Message{}
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.SessionID,
			&i.Role,
			&i.Content,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRecentMessages = `-- name: GetRecentMessages :many
SELECT id, session_id, role, content, created_at
FROM messages
WHERE session_id = ?
ORDER BY created_at DESC
LIMIT ?
`

type GetRecentMessagesParams struct {
	SessionID int64 `json:"session_id"`
	Limit     int64 `json:"limit"`
}

func (q *Queries) GetRecentMessages(ctx context.Context, arg GetRecentMessagesParams) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, getRecentMessages, arg.SessionID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Message{}
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.SessionID,
			&i.Role,
			&i.Content,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
