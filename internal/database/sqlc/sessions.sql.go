// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: sessions.sql

package sqlc

import (
	"context"
	"time"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (title, created_at, updated_at)
VALUES (?, ?, ?)
RETURNING id, title, created_at, updated_at
`

type CreateSessionParams struct {
	Title     string    `json:"title"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession, arg.Title, arg.CreatedAt, arg.UpdatedAt)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM sessions WHERE id = ?
`

func (q *Queries) DeleteSession(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteSession, id)
	return err
}

const getSession = `-- name: GetSession :one
SELECT id, title, created_at, updated_at
FROM sessions
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetSession(ctx context.Context, id int64) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSession, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listSessions = `-- name: ListSessions :many
SELECT id, title, created_at, updated_at
FROM sessions
ORDER BY updated_at DESC
LIMIT ?
`

func (q *Queries) ListSessions(ctx context.Context, limit int64) ([]Session, error) {
	rows, err := q.db.QueryContext(ctx, listSessions, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Session{}
	for rows.Next() {
		var i Session
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSessionTimestamp = `-- name: UpdateSessionTimestamp :exec
UPDATE sessions
SET updated_at = ?
WHERE id = ?
`

type UpdateSessionTimestampParams struct {
	UpdatedAt time.Time `json:"updated_at"`
	ID        int64     `json:"id"`
}

func (q *Queries) UpdateSessionTimestamp(ctx context.Context, arg UpdateSessionTimestampParams) error {
	_, err := q.db.ExecContext(ctx, updateSessionTimestamp, arg.UpdatedAt, arg.ID)
	return err
}

const updateSessionTitle = `-- name: UpdateSessionTitle :exec
UPDATE sessions
SET title = ?, updated_at = ?
WHERE id = ?
`

type UpdateSessionTitleParams struct {
	Title     string    `json:"title"`
	UpdatedAt time.Time `json:"updated_at"`
	ID        int64     `json:"id"`
}

func (q *Queries) UpdateSessionTitle(ctx context.Context, arg UpdateSessionTitleParams) error {
	_, err := q.db.ExecContext(ctx, updateSessionTitle, arg.Title, arg.UpdatedAt, arg.ID)
	return err
}
