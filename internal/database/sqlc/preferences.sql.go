// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: preferences.sql

package sqlc

import (
	"context"
)

const deletePreference = `-- name: DeletePreference :exec
DELETE FROM preferences WHERE key = ?
`

func (q *Queries) DeletePreference(ctx context.Context, key string) error {
	_, err := q.db.ExecContext(ctx, deletePreference, key)
	return err
}

const getPreference = `-- name: GetPreference :one
SELECT key, value
FROM preferences
WHERE key = ?
LIMIT 1
`

func (q *Queries) GetPreference(ctx context.Context, key string) (Preference, error) {
	row := q.db.QueryRowContext(ctx, getPreference, key)
	var i Preference
	err := row.Scan(&i.Key, &i.Value)
	return i, err
}

const listPreferences = `-- name: ListPreferences :many
SELECT key, value
FROM preferences
ORDER BY key
`

func (q *Queries) ListPreferences(ctx context.Context) ([]Preference, error) {
	rows, err := q.db.QueryContext(ctx, listPreferences)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Preference{}
	for rows.Next() {
		var i Preference
		if err := rows.Scan(&i.Key, &i.Value); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setPreference = `-- name: SetPreference :exec
INSERT OR REPLACE INTO preferences (key, value)
VALUES (?, ?)
`

type SetPreferenceParams struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

func (q *Queries) SetPreference(ctx context.Context, arg SetPreferenceParams) error {
	_, err := q.db.ExecContext(ctx, setPreference, arg.Key, arg.Value)
	return err
}
